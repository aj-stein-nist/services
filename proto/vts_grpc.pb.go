// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TrustedServicesClient is the client API for TrustedServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrustedServicesClient interface {
	// Return the summary state of the service.
	GetServiceState(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServiceState, error)
	// Returns attestation information -- evidences, endorsed claims, trust
	// vector, etc -- for the provided attestation token data.
	GetAttestation(ctx context.Context, in *AttestationToken, opts ...grpc.CallOption) (*AppraisalContext, error)
	GetSupportedVerificationMediaTypes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MediaTypeList, error)
	// Service endpoints that are used to store Reference Values
	// and Trust Anchors to the endorsement store
	AddRefValues(ctx context.Context, in *AddRefValuesRequest, opts ...grpc.CallOption) (*AddRefValuesResponse, error)
	AddTrustAnchor(ctx context.Context, in *AddTrustAnchorRequest, opts ...grpc.CallOption) (*AddTrustAnchorResponse, error)
}

type trustedServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewTrustedServicesClient(cc grpc.ClientConnInterface) TrustedServicesClient {
	return &trustedServicesClient{cc}
}

func (c *trustedServicesClient) GetServiceState(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServiceState, error) {
	out := new(ServiceState)
	err := c.cc.Invoke(ctx, "/proto.TrustedServices/GetServiceState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustedServicesClient) GetAttestation(ctx context.Context, in *AttestationToken, opts ...grpc.CallOption) (*AppraisalContext, error) {
	out := new(AppraisalContext)
	err := c.cc.Invoke(ctx, "/proto.TrustedServices/GetAttestation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustedServicesClient) GetSupportedVerificationMediaTypes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MediaTypeList, error) {
	out := new(MediaTypeList)
	err := c.cc.Invoke(ctx, "/proto.TrustedServices/GetSupportedVerificationMediaTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustedServicesClient) AddRefValues(ctx context.Context, in *AddRefValuesRequest, opts ...grpc.CallOption) (*AddRefValuesResponse, error) {
	out := new(AddRefValuesResponse)
	err := c.cc.Invoke(ctx, "/proto.TrustedServices/AddRefValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustedServicesClient) AddTrustAnchor(ctx context.Context, in *AddTrustAnchorRequest, opts ...grpc.CallOption) (*AddTrustAnchorResponse, error) {
	out := new(AddTrustAnchorResponse)
	err := c.cc.Invoke(ctx, "/proto.TrustedServices/AddTrustAnchor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrustedServicesServer is the server API for TrustedServices service.
// All implementations must embed UnimplementedTrustedServicesServer
// for forward compatibility
type TrustedServicesServer interface {
	// Return the summary state of the service.
	GetServiceState(context.Context, *emptypb.Empty) (*ServiceState, error)
	// Returns attestation information -- evidences, endorsed claims, trust
	// vector, etc -- for the provided attestation token data.
	GetAttestation(context.Context, *AttestationToken) (*AppraisalContext, error)
	GetSupportedVerificationMediaTypes(context.Context, *emptypb.Empty) (*MediaTypeList, error)
	// Service endpoints that are used to store Reference Values
	// and Trust Anchors to the endorsement store
	AddRefValues(context.Context, *AddRefValuesRequest) (*AddRefValuesResponse, error)
	AddTrustAnchor(context.Context, *AddTrustAnchorRequest) (*AddTrustAnchorResponse, error)
	mustEmbedUnimplementedTrustedServicesServer()
}

// UnimplementedTrustedServicesServer must be embedded to have forward compatible implementations.
type UnimplementedTrustedServicesServer struct {
}

func (UnimplementedTrustedServicesServer) GetServiceState(context.Context, *emptypb.Empty) (*ServiceState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceState not implemented")
}
func (UnimplementedTrustedServicesServer) GetAttestation(context.Context, *AttestationToken) (*AppraisalContext, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttestation not implemented")
}
func (UnimplementedTrustedServicesServer) GetSupportedVerificationMediaTypes(context.Context, *emptypb.Empty) (*MediaTypeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupportedVerificationMediaTypes not implemented")
}
func (UnimplementedTrustedServicesServer) AddRefValues(context.Context, *AddRefValuesRequest) (*AddRefValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRefValues not implemented")
}
func (UnimplementedTrustedServicesServer) AddTrustAnchor(context.Context, *AddTrustAnchorRequest) (*AddTrustAnchorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTrustAnchor not implemented")
}
func (UnimplementedTrustedServicesServer) mustEmbedUnimplementedTrustedServicesServer() {}

// UnsafeTrustedServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrustedServicesServer will
// result in compilation errors.
type UnsafeTrustedServicesServer interface {
	mustEmbedUnimplementedTrustedServicesServer()
}

func RegisterTrustedServicesServer(s grpc.ServiceRegistrar, srv TrustedServicesServer) {
	s.RegisterService(&TrustedServices_ServiceDesc, srv)
}

func _TrustedServices_GetServiceState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustedServicesServer).GetServiceState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TrustedServices/GetServiceState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustedServicesServer).GetServiceState(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustedServices_GetAttestation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttestationToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustedServicesServer).GetAttestation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TrustedServices/GetAttestation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustedServicesServer).GetAttestation(ctx, req.(*AttestationToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustedServices_GetSupportedVerificationMediaTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustedServicesServer).GetSupportedVerificationMediaTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TrustedServices/GetSupportedVerificationMediaTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustedServicesServer).GetSupportedVerificationMediaTypes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustedServices_AddRefValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRefValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustedServicesServer).AddRefValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TrustedServices/AddRefValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustedServicesServer).AddRefValues(ctx, req.(*AddRefValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustedServices_AddTrustAnchor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTrustAnchorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustedServicesServer).AddTrustAnchor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TrustedServices/AddTrustAnchor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustedServicesServer).AddTrustAnchor(ctx, req.(*AddTrustAnchorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrustedServices_ServiceDesc is the grpc.ServiceDesc for TrustedServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrustedServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TrustedServices",
	HandlerType: (*TrustedServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServiceState",
			Handler:    _TrustedServices_GetServiceState_Handler,
		},
		{
			MethodName: "GetAttestation",
			Handler:    _TrustedServices_GetAttestation_Handler,
		},
		{
			MethodName: "GetSupportedVerificationMediaTypes",
			Handler:    _TrustedServices_GetSupportedVerificationMediaTypes_Handler,
		},
		{
			MethodName: "AddRefValues",
			Handler:    _TrustedServices_AddRefValues_Handler,
		},
		{
			MethodName: "AddTrustAnchor",
			Handler:    _TrustedServices_AddTrustAnchor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vts.proto",
}
