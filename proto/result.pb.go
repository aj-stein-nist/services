// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.3
// source: result.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Note: tier values have been chosen to be aligned with sourced-data definition of
// https://datatracker.ietf.org/doc/draft-ietf-rats-ar4si/
type TrustTier int32

const (
	TrustTier_NONE            TrustTier = 0
	TrustTier_AFFIRMING       TrustTier = 2
	TrustTier_WARNING         TrustTier = 32
	TrustTier_CONTRAINDICATED TrustTier = 96
)

// Enum value maps for TrustTier.
var (
	TrustTier_name = map[int32]string{
		0:  "NONE",
		2:  "AFFIRMING",
		32: "WARNING",
		96: "CONTRAINDICATED",
	}
	TrustTier_value = map[string]int32{
		"NONE":            0,
		"AFFIRMING":       2,
		"WARNING":         32,
		"CONTRAINDICATED": 96,
	}
)

func (x TrustTier) Enum() *TrustTier {
	p := new(TrustTier)
	*p = x
	return p
}

func (x TrustTier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrustTier) Descriptor() protoreflect.EnumDescriptor {
	return file_result_proto_enumTypes[0].Descriptor()
}

func (TrustTier) Type() protoreflect.EnumType {
	return &file_result_proto_enumTypes[0]
}

func (x TrustTier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrustTier.Descriptor instead.
func (TrustTier) EnumDescriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{0}
}

type TrustVector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceIdentity int32 `protobuf:"zigzag32,1,opt,name=instance_identity,json=instance-identity,proto3" json:"instance_identity,omitempty"`
	Configuration    int32 `protobuf:"zigzag32,2,opt,name=configuration,proto3" json:"configuration,omitempty"`
	Executables      int32 `protobuf:"zigzag32,3,opt,name=executables,proto3" json:"executables,omitempty"`
	FileSystem       int32 `protobuf:"zigzag32,4,opt,name=file_system,json=file-system,proto3" json:"file_system,omitempty"`
	Hardware         int32 `protobuf:"zigzag32,5,opt,name=hardware,proto3" json:"hardware,omitempty"`
	RuntimeOpaque    int32 `protobuf:"zigzag32,6,opt,name=runtime_opaque,json=runtime-opaque,proto3" json:"runtime_opaque,omitempty"`
	StorageOpaque    int32 `protobuf:"zigzag32,7,opt,name=storage_opaque,json=storage-opaque,proto3" json:"storage_opaque,omitempty"`
	SourcedData      int32 `protobuf:"zigzag32,8,opt,name=sourced_data,json=sourced-data,proto3" json:"sourced_data,omitempty"`
}

func (x *TrustVector) Reset() {
	*x = TrustVector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_result_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrustVector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustVector) ProtoMessage() {}

func (x *TrustVector) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustVector.ProtoReflect.Descriptor instead.
func (*TrustVector) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{0}
}

func (x *TrustVector) GetInstanceIdentity() int32 {
	if x != nil {
		return x.InstanceIdentity
	}
	return 0
}

func (x *TrustVector) GetConfiguration() int32 {
	if x != nil {
		return x.Configuration
	}
	return 0
}

func (x *TrustVector) GetExecutables() int32 {
	if x != nil {
		return x.Executables
	}
	return 0
}

func (x *TrustVector) GetFileSystem() int32 {
	if x != nil {
		return x.FileSystem
	}
	return 0
}

func (x *TrustVector) GetHardware() int32 {
	if x != nil {
		return x.Hardware
	}
	return 0
}

func (x *TrustVector) GetRuntimeOpaque() int32 {
	if x != nil {
		return x.RuntimeOpaque
	}
	return 0
}

func (x *TrustVector) GetStorageOpaque() int32 {
	if x != nil {
		return x.StorageOpaque
	}
	return 0
}

func (x *TrustVector) GetSourcedData() int32 {
	if x != nil {
		return x.SourcedData
	}
	return 0
}

type EndorsedClaims struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HardwareDetails      *structpb.Struct `protobuf:"bytes,1,opt,name=hardware_details,json=hw-details,proto3" json:"hardware_details,omitempty"`
	SoftwareDetails      *structpb.Struct `protobuf:"bytes,2,opt,name=software_details,json=sw-details,proto3" json:"software_details,omitempty"`
	CertificationDetails *structpb.Struct `protobuf:"bytes,3,opt,name=certification_details,json=certification-details,proto3" json:"certification_details,omitempty"`
	ConfigDetails        *structpb.Struct `protobuf:"bytes,4,opt,name=config_details,json=config-details,proto3" json:"config_details,omitempty"`
}

func (x *EndorsedClaims) Reset() {
	*x = EndorsedClaims{}
	if protoimpl.UnsafeEnabled {
		mi := &file_result_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndorsedClaims) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndorsedClaims) ProtoMessage() {}

func (x *EndorsedClaims) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndorsedClaims.ProtoReflect.Descriptor instead.
func (*EndorsedClaims) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{1}
}

func (x *EndorsedClaims) GetHardwareDetails() *structpb.Struct {
	if x != nil {
		return x.HardwareDetails
	}
	return nil
}

func (x *EndorsedClaims) GetSoftwareDetails() *structpb.Struct {
	if x != nil {
		return x.SoftwareDetails
	}
	return nil
}

func (x *EndorsedClaims) GetCertificationDetails() *structpb.Struct {
	if x != nil {
		return x.CertificationDetails
	}
	return nil
}

func (x *EndorsedClaims) GetConfigDetails() *structpb.Struct {
	if x != nil {
		return x.ConfigDetails
	}
	return nil
}

type AttestationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status                 TrustTier              `protobuf:"varint,1,opt,name=status,proto3,enum=proto.TrustTier" json:"status,omitempty"`
	TrustVector            *TrustVector           `protobuf:"bytes,2,opt,name=trust_vector,json=trust-vector,proto3" json:"trust_vector,omitempty"`
	RawEvidence            []byte                 `protobuf:"bytes,3,opt,name=raw_evidence,json=raw-evidence,proto3" json:"raw_evidence,omitempty"`
	Timestamp              *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	EndorsedClaims         *EndorsedClaims        `protobuf:"bytes,5,opt,name=endorsed_claims,json=endorsed-claims,proto3" json:"endorsed_claims,omitempty"`
	AppraisalPolicyID      string                 `protobuf:"bytes,6,opt,name=AppraisalPolicyID,json=appraisal-policy-id,proto3" json:"AppraisalPolicyID,omitempty"`
	AppraisalPolicyVersion int32                  `protobuf:"varint,7,opt,name=AppraisalPolicyVersion,json=appraisal-policy-version,proto3" json:"AppraisalPolicyVersion,omitempty"`
	// Extension
	ProcessedEvidence   *structpb.Struct `protobuf:"bytes,8,opt,name=processed_evidence,json=veraison-processed-evidence,proto3" json:"processed_evidence,omitempty"`
	VerifierAddedClaims *structpb.Struct `protobuf:"bytes,9,opt,name=verifier_added_claims,json=veraison-verifier-added-claims,proto3" json:"verifier_added_claims,omitempty"`
}

func (x *AttestationResult) Reset() {
	*x = AttestationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_result_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttestationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttestationResult) ProtoMessage() {}

func (x *AttestationResult) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttestationResult.ProtoReflect.Descriptor instead.
func (*AttestationResult) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{2}
}

func (x *AttestationResult) GetStatus() TrustTier {
	if x != nil {
		return x.Status
	}
	return TrustTier_NONE
}

func (x *AttestationResult) GetTrustVector() *TrustVector {
	if x != nil {
		return x.TrustVector
	}
	return nil
}

func (x *AttestationResult) GetRawEvidence() []byte {
	if x != nil {
		return x.RawEvidence
	}
	return nil
}

func (x *AttestationResult) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *AttestationResult) GetEndorsedClaims() *EndorsedClaims {
	if x != nil {
		return x.EndorsedClaims
	}
	return nil
}

func (x *AttestationResult) GetAppraisalPolicyID() string {
	if x != nil {
		return x.AppraisalPolicyID
	}
	return ""
}

func (x *AttestationResult) GetAppraisalPolicyVersion() int32 {
	if x != nil {
		return x.AppraisalPolicyVersion
	}
	return 0
}

func (x *AttestationResult) GetProcessedEvidence() *structpb.Struct {
	if x != nil {
		return x.ProcessedEvidence
	}
	return nil
}

func (x *AttestationResult) GetVerifierAddedClaims() *structpb.Struct {
	if x != nil {
		return x.VerifierAddedClaims
	}
	return nil
}

var File_result_proto protoreflect.FileDescriptor

var file_result_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb5, 0x02, 0x0a, 0x0b, 0x54, 0x72, 0x75, 0x73, 0x74, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x11, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0b, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x0b, 0x66, 0x69, 0x6c, 0x65, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08,
	0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08,
	0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x0e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2d, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x70, 0x61, 0x71,
	0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2d, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0c,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x64, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9e, 0x02, 0x0a,
	0x0e, 0x45, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x12,
	0x3d, 0x0a, 0x10, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x0a, 0x68, 0x77, 0x2d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3d,
	0x0a, 0x10, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x0a, 0x73, 0x77, 0x2d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x4d, 0x0a,
	0x15, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x15, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3f, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xa8, 0x04,
	0x0a, 0x11, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x75, 0x73,
	0x74, 0x54, 0x69, 0x65, 0x72, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a,
	0x0c, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x75, 0x73,
	0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0c, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2d, 0x76,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x61, 0x77, 0x5f, 0x65, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x72, 0x61, 0x77,
	0x2d, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x3f, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x65, 0x64, 0x5f,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x65, 0x64, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x73, 0x52, 0x0f, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x65, 0x64, 0x2d, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x73, 0x12, 0x2e, 0x0a, 0x11, 0x41, 0x70, 0x70, 0x72, 0x61, 0x69, 0x73, 0x61,
	0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x61, 0x70, 0x70, 0x72, 0x61, 0x69, 0x73, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2d, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x16, 0x41, 0x70, 0x70, 0x72, 0x61, 0x69, 0x73, 0x61,
	0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x61, 0x70, 0x70, 0x72, 0x61, 0x69, 0x73, 0x61, 0x6c, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50,
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x1b, 0x76, 0x65, 0x72, 0x61, 0x69, 0x73, 0x6f, 0x6e, 0x2d, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x2d, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x56, 0x0a, 0x15, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x65, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x1e, 0x76, 0x65, 0x72, 0x61, 0x69, 0x73,
	0x6f, 0x6e, 0x2d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x64, 0x65,
	0x64, 0x2d, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x2a, 0x46, 0x0a, 0x09, 0x54, 0x72, 0x75, 0x73,
	0x74, 0x54, 0x69, 0x65, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x41, 0x46, 0x46, 0x49, 0x52, 0x4d, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x20, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x60,
	0x42, 0x24, 0x5a, 0x22, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76,
	0x65, 0x72, 0x61, 0x69, 0x73, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_result_proto_rawDescOnce sync.Once
	file_result_proto_rawDescData = file_result_proto_rawDesc
)

func file_result_proto_rawDescGZIP() []byte {
	file_result_proto_rawDescOnce.Do(func() {
		file_result_proto_rawDescData = protoimpl.X.CompressGZIP(file_result_proto_rawDescData)
	})
	return file_result_proto_rawDescData
}

var file_result_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_result_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_result_proto_goTypes = []interface{}{
	(TrustTier)(0),                // 0: proto.TrustTier
	(*TrustVector)(nil),           // 1: proto.TrustVector
	(*EndorsedClaims)(nil),        // 2: proto.EndorsedClaims
	(*AttestationResult)(nil),     // 3: proto.AttestationResult
	(*structpb.Struct)(nil),       // 4: google.protobuf.Struct
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
}
var file_result_proto_depIdxs = []int32{
	4,  // 0: proto.EndorsedClaims.hardware_details:type_name -> google.protobuf.Struct
	4,  // 1: proto.EndorsedClaims.software_details:type_name -> google.protobuf.Struct
	4,  // 2: proto.EndorsedClaims.certification_details:type_name -> google.protobuf.Struct
	4,  // 3: proto.EndorsedClaims.config_details:type_name -> google.protobuf.Struct
	0,  // 4: proto.AttestationResult.status:type_name -> proto.TrustTier
	1,  // 5: proto.AttestationResult.trust_vector:type_name -> proto.TrustVector
	5,  // 6: proto.AttestationResult.timestamp:type_name -> google.protobuf.Timestamp
	2,  // 7: proto.AttestationResult.endorsed_claims:type_name -> proto.EndorsedClaims
	4,  // 8: proto.AttestationResult.processed_evidence:type_name -> google.protobuf.Struct
	4,  // 9: proto.AttestationResult.verifier_added_claims:type_name -> google.protobuf.Struct
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_result_proto_init() }
func file_result_proto_init() {
	if File_result_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_result_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrustVector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_result_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndorsedClaims); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_result_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttestationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_result_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_result_proto_goTypes,
		DependencyIndexes: file_result_proto_depIdxs,
		EnumInfos:         file_result_proto_enumTypes,
		MessageInfos:      file_result_proto_msgTypes,
	}.Build()
	File_result_proto = out.File
	file_result_proto_rawDesc = nil
	file_result_proto_goTypes = nil
	file_result_proto_depIdxs = nil
}
