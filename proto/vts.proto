syntax = "proto3";
package proto;

option go_package = "github.com/veraison/services/proto";


import "google/protobuf/struct.proto";
import "google/protobuf/empty.proto";
import "appraisal_context.proto";
import "token.proto";
import "state.proto";


message Status {
    bool result = 1;
    string error_detail = 2;
}

message Evidence {
    google.protobuf.Struct value = 1;
}

message AddRefValuesRequest {
    repeated Endorsement reference_values = 1;
}

message AddRefValuesResponse {
    Status status = 1;
}

enum EndorsementType {
    UNSET = 0;
    REFERENCE_VALUE = 1;
    VERIFICATION_KEY = 2;
}

message Endorsement {
    string scheme = 1;
    EndorsementType type = 2;
    /* sub_type is opaque to Veraison and is used by schemes to classify range of
    Endorsement sub types for a given Endorsement type. It is assumed that
    there is going to be only one single sub type required */
    string sub_type = 3;
    google.protobuf.Struct attributes = 4;
}

message AddTrustAnchorRequest {
    Endorsement trust_anchor = 1;
}

message AddTrustAnchorResponse {
    Status status = 1;
}

message MediaTypeList {
    repeated string media_types = 1;
}

// Interface for the Veraison Trusted Services component.
service TrustedServices {
    // Return the summary state of the service.
    rpc GetServiceState(google.protobuf.Empty) returns (ServiceState);

    // Returns attestation information -- evidences, endorsed claims, trust
    // vector, etc -- for the provided attestation token data.
    rpc GetAttestation(AttestationToken) returns (AppraisalContext);
    rpc GetSupportedVerificationMediaTypes(google.protobuf.Empty) returns (MediaTypeList);

    // Service endpoints that are used to store Reference Values
    // and Trust Anchors to the endorsement store
    rpc AddRefValues(AddRefValuesRequest) returns (AddRefValuesResponse);
    rpc AddTrustAnchor(AddTrustAnchorRequest) returns (AddTrustAnchorResponse);
}

