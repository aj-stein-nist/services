// Code generated by MockGen. DO NOT EDIT.
// Source: ../../vts/iclient.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	proto "github.com/veraison/services/proto"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockIVTSClient is a mock of IVTSClient interface.
type MockIVTSClient struct {
	ctrl     *gomock.Controller
	recorder *MockIVTSClientMockRecorder
}

// MockIVTSClientMockRecorder is the mock recorder for MockIVTSClient.
type MockIVTSClientMockRecorder struct {
	mock *MockIVTSClient
}

// NewMockIVTSClient creates a new mock instance.
func NewMockIVTSClient(ctrl *gomock.Controller) *MockIVTSClient {
	mock := &MockIVTSClient{ctrl: ctrl}
	mock.recorder = &MockIVTSClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIVTSClient) EXPECT() *MockIVTSClientMockRecorder {
	return m.recorder
}

// AddRefValues mocks base method.
func (m *MockIVTSClient) AddRefValues(ctx context.Context, in *proto.AddRefValuesRequest, opts ...grpc.CallOption) (*proto.AddRefValuesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddRefValues", varargs...)
	ret0, _ := ret[0].(*proto.AddRefValuesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRefValues indicates an expected call of AddRefValues.
func (mr *MockIVTSClientMockRecorder) AddRefValues(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRefValues", reflect.TypeOf((*MockIVTSClient)(nil).AddRefValues), varargs...)
}

// AddTrustAnchor mocks base method.
func (m *MockIVTSClient) AddTrustAnchor(ctx context.Context, in *proto.AddTrustAnchorRequest, opts ...grpc.CallOption) (*proto.AddTrustAnchorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddTrustAnchor", varargs...)
	ret0, _ := ret[0].(*proto.AddTrustAnchorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTrustAnchor indicates an expected call of AddTrustAnchor.
func (mr *MockIVTSClientMockRecorder) AddTrustAnchor(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTrustAnchor", reflect.TypeOf((*MockIVTSClient)(nil).AddTrustAnchor), varargs...)
}

// GetAttestation mocks base method.
func (m *MockIVTSClient) GetAttestation(ctx context.Context, in *proto.AttestationToken, opts ...grpc.CallOption) (*proto.AppraisalContext, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAttestation", varargs...)
	ret0, _ := ret[0].(*proto.AppraisalContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttestation indicates an expected call of GetAttestation.
func (mr *MockIVTSClientMockRecorder) GetAttestation(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttestation", reflect.TypeOf((*MockIVTSClient)(nil).GetAttestation), varargs...)
}

// GetServiceState mocks base method.
func (m *MockIVTSClient) GetServiceState(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*proto.ServiceState, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServiceState", varargs...)
	ret0, _ := ret[0].(*proto.ServiceState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceState indicates an expected call of GetServiceState.
func (mr *MockIVTSClientMockRecorder) GetServiceState(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceState", reflect.TypeOf((*MockIVTSClient)(nil).GetServiceState), varargs...)
}

// GetSupportedVerificationMediaTypes mocks base method.
func (m *MockIVTSClient) GetSupportedVerificationMediaTypes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*proto.MediaTypeList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSupportedVerificationMediaTypes", varargs...)
	ret0, _ := ret[0].(*proto.MediaTypeList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupportedVerificationMediaTypes indicates an expected call of GetSupportedVerificationMediaTypes.
func (mr *MockIVTSClientMockRecorder) GetSupportedVerificationMediaTypes(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedVerificationMediaTypes", reflect.TypeOf((*MockIVTSClient)(nil).GetSupportedVerificationMediaTypes), varargs...)
}
